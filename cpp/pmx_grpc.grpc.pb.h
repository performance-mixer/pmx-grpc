// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pmx_grpc.proto
#ifndef GRPC_pmx_5fgrpc_2eproto__INCLUDED
#define GRPC_pmx_5fgrpc_2eproto__INCLUDED

#include "pmx_grpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace pmx {
namespace grpc {

class PmxGrpc final {
 public:
  static constexpr char const* service_full_name() {
    return "pmx.grpc.PmxGrpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::pmx::grpc::ListPortsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListPortsResponse>> AsyncListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListPortsResponse>>(AsyncListPortsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListPortsResponse>> PrepareAsyncListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListPortsResponse>>(PrepareAsyncListPortsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::pmx::grpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>> AsyncSetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>>(AsyncSetupInputPortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>> PrepareAsyncSetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>>(PrepareAsyncSetupInputPortRaw(context, request, cq));
    }
    virtual ::grpc::Status ClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::pmx::grpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>> AsyncClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>>(AsyncClearInputPortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>> PrepareAsyncClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>>(PrepareAsyncClearInputPortRaw(context, request, cq));
    }
    virtual ::grpc::Status ListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::pmx::grpc::ListInputPortSetupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListInputPortSetupResponse>> AsyncListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListInputPortSetupResponse>>(AsyncListInputPortsSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListInputPortSetupResponse>> PrepareAsyncListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListInputPortSetupResponse>>(PrepareAsyncListInputPortsSetupRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest* request, ::pmx::grpc::ListPortsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest* request, ::pmx::grpc::ListPortsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest* request, ::pmx::grpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest* request, ::pmx::grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest* request, ::pmx::grpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest* request, ::pmx::grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest* request, ::pmx::grpc::ListInputPortSetupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest* request, ::pmx::grpc::ListInputPortSetupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListPortsResponse>* AsyncListPortsRaw(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListPortsResponse>* PrepareAsyncListPortsRaw(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>* AsyncSetupInputPortRaw(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>* PrepareAsyncSetupInputPortRaw(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>* AsyncClearInputPortRaw(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::Response>* PrepareAsyncClearInputPortRaw(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListInputPortSetupResponse>* AsyncListInputPortsSetupRaw(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pmx::grpc::ListInputPortSetupResponse>* PrepareAsyncListInputPortsSetupRaw(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::pmx::grpc::ListPortsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListPortsResponse>> AsyncListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListPortsResponse>>(AsyncListPortsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListPortsResponse>> PrepareAsyncListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListPortsResponse>>(PrepareAsyncListPortsRaw(context, request, cq));
    }
    ::grpc::Status SetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::pmx::grpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>> AsyncSetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>>(AsyncSetupInputPortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>> PrepareAsyncSetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>>(PrepareAsyncSetupInputPortRaw(context, request, cq));
    }
    ::grpc::Status ClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::pmx::grpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>> AsyncClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>>(AsyncClearInputPortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>> PrepareAsyncClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>>(PrepareAsyncClearInputPortRaw(context, request, cq));
    }
    ::grpc::Status ListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::pmx::grpc::ListInputPortSetupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListInputPortSetupResponse>> AsyncListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListInputPortSetupResponse>>(AsyncListInputPortsSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListInputPortSetupResponse>> PrepareAsyncListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListInputPortSetupResponse>>(PrepareAsyncListInputPortsSetupRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest* request, ::pmx::grpc::ListPortsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListPorts(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest* request, ::pmx::grpc::ListPortsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest* request, ::pmx::grpc::Response* response, std::function<void(::grpc::Status)>) override;
      void SetupInputPort(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest* request, ::pmx::grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest* request, ::pmx::grpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ClearInputPort(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest* request, ::pmx::grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest* request, ::pmx::grpc::ListInputPortSetupResponse* response, std::function<void(::grpc::Status)>) override;
      void ListInputPortsSetup(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest* request, ::pmx::grpc::ListInputPortSetupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListPortsResponse>* AsyncListPortsRaw(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListPortsResponse>* PrepareAsyncListPortsRaw(::grpc::ClientContext* context, const ::pmx::grpc::ListPortsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>* AsyncSetupInputPortRaw(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>* PrepareAsyncSetupInputPortRaw(::grpc::ClientContext* context, const ::pmx::grpc::SetupInputPortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>* AsyncClearInputPortRaw(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pmx::grpc::Response>* PrepareAsyncClearInputPortRaw(::grpc::ClientContext* context, const ::pmx::grpc::ClearInputPortRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListInputPortSetupResponse>* AsyncListInputPortsSetupRaw(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pmx::grpc::ListInputPortSetupResponse>* PrepareAsyncListInputPortsSetupRaw(::grpc::ClientContext* context, const ::pmx::grpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListPorts_;
    const ::grpc::internal::RpcMethod rpcmethod_SetupInputPort_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearInputPort_;
    const ::grpc::internal::RpcMethod rpcmethod_ListInputPortsSetup_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListPorts(::grpc::ServerContext* context, const ::pmx::grpc::ListPortsRequest* request, ::pmx::grpc::ListPortsResponse* response);
    virtual ::grpc::Status SetupInputPort(::grpc::ServerContext* context, const ::pmx::grpc::SetupInputPortRequest* request, ::pmx::grpc::Response* response);
    virtual ::grpc::Status ClearInputPort(::grpc::ServerContext* context, const ::pmx::grpc::ClearInputPortRequest* request, ::pmx::grpc::Response* response);
    virtual ::grpc::Status ListInputPortsSetup(::grpc::ServerContext* context, const ::pmx::grpc::EmptyRequest* request, ::pmx::grpc::ListInputPortSetupResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPorts() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPorts(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ListPortsRequest* /*request*/, ::pmx::grpc::ListPortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPorts(::grpc::ServerContext* context, ::pmx::grpc::ListPortsRequest* request, ::grpc::ServerAsyncResponseWriter< ::pmx::grpc::ListPortsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetupInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetupInputPort() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetupInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::SetupInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetupInputPort(::grpc::ServerContext* context, ::pmx::grpc::SetupInputPortRequest* request, ::grpc::ServerAsyncResponseWriter< ::pmx::grpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearInputPort() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ClearInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ClearInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearInputPort(::grpc::ServerContext* context, ::pmx::grpc::ClearInputPortRequest* request, ::grpc::ServerAsyncResponseWriter< ::pmx::grpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInputPortsSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListInputPortsSetup() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListInputPortsSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputPortsSetup(::grpc::ServerContext* /*context*/, const ::pmx::grpc::EmptyRequest* /*request*/, ::pmx::grpc::ListInputPortSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInputPortsSetup(::grpc::ServerContext* context, ::pmx::grpc::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::pmx::grpc::ListInputPortSetupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListPorts<WithAsyncMethod_SetupInputPort<WithAsyncMethod_ClearInputPort<WithAsyncMethod_ListInputPortsSetup<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListPorts() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pmx::grpc::ListPortsRequest, ::pmx::grpc::ListPortsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pmx::grpc::ListPortsRequest* request, ::pmx::grpc::ListPortsResponse* response) { return this->ListPorts(context, request, response); }));}
    void SetMessageAllocatorFor_ListPorts(
        ::grpc::MessageAllocator< ::pmx::grpc::ListPortsRequest, ::pmx::grpc::ListPortsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pmx::grpc::ListPortsRequest, ::pmx::grpc::ListPortsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPorts(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ListPortsRequest* /*request*/, ::pmx::grpc::ListPortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPorts(
      ::grpc::CallbackServerContext* /*context*/, const ::pmx::grpc::ListPortsRequest* /*request*/, ::pmx::grpc::ListPortsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetupInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetupInputPort() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::pmx::grpc::SetupInputPortRequest, ::pmx::grpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pmx::grpc::SetupInputPortRequest* request, ::pmx::grpc::Response* response) { return this->SetupInputPort(context, request, response); }));}
    void SetMessageAllocatorFor_SetupInputPort(
        ::grpc::MessageAllocator< ::pmx::grpc::SetupInputPortRequest, ::pmx::grpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pmx::grpc::SetupInputPortRequest, ::pmx::grpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetupInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::SetupInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetupInputPort(
      ::grpc::CallbackServerContext* /*context*/, const ::pmx::grpc::SetupInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClearInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClearInputPort() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::pmx::grpc::ClearInputPortRequest, ::pmx::grpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pmx::grpc::ClearInputPortRequest* request, ::pmx::grpc::Response* response) { return this->ClearInputPort(context, request, response); }));}
    void SetMessageAllocatorFor_ClearInputPort(
        ::grpc::MessageAllocator< ::pmx::grpc::ClearInputPortRequest, ::pmx::grpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pmx::grpc::ClearInputPortRequest, ::pmx::grpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClearInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ClearInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearInputPort(
      ::grpc::CallbackServerContext* /*context*/, const ::pmx::grpc::ClearInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListInputPortsSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListInputPortsSetup() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::pmx::grpc::EmptyRequest, ::pmx::grpc::ListInputPortSetupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pmx::grpc::EmptyRequest* request, ::pmx::grpc::ListInputPortSetupResponse* response) { return this->ListInputPortsSetup(context, request, response); }));}
    void SetMessageAllocatorFor_ListInputPortsSetup(
        ::grpc::MessageAllocator< ::pmx::grpc::EmptyRequest, ::pmx::grpc::ListInputPortSetupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pmx::grpc::EmptyRequest, ::pmx::grpc::ListInputPortSetupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListInputPortsSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputPortsSetup(::grpc::ServerContext* /*context*/, const ::pmx::grpc::EmptyRequest* /*request*/, ::pmx::grpc::ListInputPortSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInputPortsSetup(
      ::grpc::CallbackServerContext* /*context*/, const ::pmx::grpc::EmptyRequest* /*request*/, ::pmx::grpc::ListInputPortSetupResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListPorts<WithCallbackMethod_SetupInputPort<WithCallbackMethod_ClearInputPort<WithCallbackMethod_ListInputPortsSetup<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPorts() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPorts(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ListPortsRequest* /*request*/, ::pmx::grpc::ListPortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetupInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetupInputPort() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetupInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::SetupInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearInputPort() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ClearInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ClearInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListInputPortsSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListInputPortsSetup() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListInputPortsSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputPortsSetup(::grpc::ServerContext* /*context*/, const ::pmx::grpc::EmptyRequest* /*request*/, ::pmx::grpc::ListInputPortSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPorts() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPorts(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ListPortsRequest* /*request*/, ::pmx::grpc::ListPortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPorts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetupInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetupInputPort() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetupInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::SetupInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetupInputPort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearInputPort() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ClearInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ClearInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearInputPort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListInputPortsSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListInputPortsSetup() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListInputPortsSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputPortsSetup(::grpc::ServerContext* /*context*/, const ::pmx::grpc::EmptyRequest* /*request*/, ::pmx::grpc::ListInputPortSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInputPortsSetup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListPorts() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPorts(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPorts(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ListPortsRequest* /*request*/, ::pmx::grpc::ListPortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPorts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetupInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetupInputPort() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetupInputPort(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetupInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::SetupInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetupInputPort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClearInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClearInputPort() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearInputPort(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClearInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ClearInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearInputPort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListInputPortsSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListInputPortsSetup() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListInputPortsSetup(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListInputPortsSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputPortsSetup(::grpc::ServerContext* /*context*/, const ::pmx::grpc::EmptyRequest* /*request*/, ::pmx::grpc::ListInputPortSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInputPortsSetup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPorts() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pmx::grpc::ListPortsRequest, ::pmx::grpc::ListPortsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pmx::grpc::ListPortsRequest, ::pmx::grpc::ListPortsResponse>* streamer) {
                       return this->StreamedListPorts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPorts(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ListPortsRequest* /*request*/, ::pmx::grpc::ListPortsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPorts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pmx::grpc::ListPortsRequest,::pmx::grpc::ListPortsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetupInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetupInputPort() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pmx::grpc::SetupInputPortRequest, ::pmx::grpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pmx::grpc::SetupInputPortRequest, ::pmx::grpc::Response>* streamer) {
                       return this->StreamedSetupInputPort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetupInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetupInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::SetupInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetupInputPort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pmx::grpc::SetupInputPortRequest,::pmx::grpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearInputPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearInputPort() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pmx::grpc::ClearInputPortRequest, ::pmx::grpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pmx::grpc::ClearInputPortRequest, ::pmx::grpc::Response>* streamer) {
                       return this->StreamedClearInputPort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearInputPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearInputPort(::grpc::ServerContext* /*context*/, const ::pmx::grpc::ClearInputPortRequest* /*request*/, ::pmx::grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearInputPort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pmx::grpc::ClearInputPortRequest,::pmx::grpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInputPortsSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListInputPortsSetup() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pmx::grpc::EmptyRequest, ::pmx::grpc::ListInputPortSetupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pmx::grpc::EmptyRequest, ::pmx::grpc::ListInputPortSetupResponse>* streamer) {
                       return this->StreamedListInputPortsSetup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListInputPortsSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInputPortsSetup(::grpc::ServerContext* /*context*/, const ::pmx::grpc::EmptyRequest* /*request*/, ::pmx::grpc::ListInputPortSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInputPortsSetup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pmx::grpc::EmptyRequest,::pmx::grpc::ListInputPortSetupResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListPorts<WithStreamedUnaryMethod_SetupInputPort<WithStreamedUnaryMethod_ClearInputPort<WithStreamedUnaryMethod_ListInputPortsSetup<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListPorts<WithStreamedUnaryMethod_SetupInputPort<WithStreamedUnaryMethod_ClearInputPort<WithStreamedUnaryMethod_ListInputPortsSetup<Service > > > > StreamedService;
};

}  // namespace grpc
}  // namespace pmx


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_pmx_5fgrpc_2eproto__INCLUDED
