// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: port.proto
// Protobuf C++ Version: 5.29.2

#ifndef port_2eproto_2epb_2eh
#define port_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_port_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_port_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_port_2eproto;
namespace pmx {
namespace grpc {
class ListPort;
struct ListPortDefaultTypeInternal;
extern ListPortDefaultTypeInternal _ListPort_default_instance_;
class ListPortsRequest;
struct ListPortsRequestDefaultTypeInternal;
extern ListPortsRequestDefaultTypeInternal _ListPortsRequest_default_instance_;
class ListPortsResponse;
struct ListPortsResponseDefaultTypeInternal;
extern ListPortsResponseDefaultTypeInternal _ListPortsResponse_default_instance_;
}  // namespace grpc
}  // namespace pmx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace pmx {
namespace grpc {
enum PortDirection : int {
  IN = 0,
  OUT = 1,
  UNKNOWN = 2,
  PortDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PortDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PortDirection_IsValid(int value);
extern const uint32_t PortDirection_internal_data_[];
constexpr PortDirection PortDirection_MIN = static_cast<PortDirection>(0);
constexpr PortDirection PortDirection_MAX = static_cast<PortDirection>(2);
constexpr int PortDirection_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PortDirection_descriptor();
template <typename T>
const std::string& PortDirection_Name(T value) {
  static_assert(std::is_same<T, PortDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PortDirection_Name().");
  return PortDirection_Name(static_cast<PortDirection>(value));
}
template <>
inline const std::string& PortDirection_Name(PortDirection value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PortDirection_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PortDirection_Parse(absl::string_view name, PortDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PortDirection>(
      PortDirection_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ListPortsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:pmx.grpc.ListPortsRequest) */ {
 public:
  inline ListPortsRequest() : ListPortsRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListPortsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListPortsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListPortsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListPortsRequest(const ListPortsRequest& from) : ListPortsRequest(nullptr, from) {}
  inline ListPortsRequest(ListPortsRequest&& from) noexcept
      : ListPortsRequest(nullptr, std::move(from)) {}
  inline ListPortsRequest& operator=(const ListPortsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPortsRequest& operator=(ListPortsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPortsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPortsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPortsRequest*>(
        &_ListPortsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ListPortsRequest& a, ListPortsRequest& b) { a.Swap(&b); }
  inline void Swap(ListPortsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPortsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPortsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ListPortsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListPortsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListPortsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pmx.grpc.ListPortsRequest"; }

 protected:
  explicit ListPortsRequest(::google::protobuf::Arena* arena);
  ListPortsRequest(::google::protobuf::Arena* arena, const ListPortsRequest& from);
  ListPortsRequest(::google::protobuf::Arena* arena, ListPortsRequest&& from) noexcept
      : ListPortsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:pmx.grpc.ListPortsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListPortsRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_port_2eproto;
};
// -------------------------------------------------------------------

class ListPort final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pmx.grpc.ListPort) */ {
 public:
  inline ListPort() : ListPort(nullptr) {}
  ~ListPort() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListPort* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListPort));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListPort(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListPort(const ListPort& from) : ListPort(nullptr, from) {}
  inline ListPort(ListPort&& from) noexcept
      : ListPort(nullptr, std::move(from)) {}
  inline ListPort& operator=(const ListPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPort& operator=(ListPort&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPort& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPort* internal_default_instance() {
    return reinterpret_cast<const ListPort*>(
        &_ListPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ListPort& a, ListPort& b) { a.Swap(&b); }
  inline void Swap(ListPort* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPort* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPort* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ListPort>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListPort& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListPort& from) { ListPort::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ListPort* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pmx.grpc.ListPort"; }

 protected:
  explicit ListPort(::google::protobuf::Arena* arena);
  ListPort(::google::protobuf::Arena* arena, const ListPort& from);
  ListPort(::google::protobuf::Arena* arena, ListPort&& from) noexcept
      : ListPort(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kAliasFieldNumber = 6,
    kGroupFieldNumber = 7,
    kPathFieldNumber = 8,
    kDspFormatFieldNumber = 9,
    kAudioChannelFieldNumber = 10,
    kIdFieldNumber = 2,
    kNodeIdFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kPhysicalFieldNumber = 5,
    kIsMonitorFieldNumber = 12,
    kObjectSerialFieldNumber = 11,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string alias = 6;
  void clear_alias() ;
  const std::string& alias() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alias(Arg_&& arg, Args_... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* value);

  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(
      const std::string& value);
  std::string* _internal_mutable_alias();

  public:
  // string group = 7;
  void clear_group() ;
  const std::string& group() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group(Arg_&& arg, Args_... args);
  std::string* mutable_group();
  PROTOBUF_NODISCARD std::string* release_group();
  void set_allocated_group(std::string* value);

  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(
      const std::string& value);
  std::string* _internal_mutable_group();

  public:
  // string path = 8;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string dsp_format = 9;
  void clear_dsp_format() ;
  const std::string& dsp_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dsp_format(Arg_&& arg, Args_... args);
  std::string* mutable_dsp_format();
  PROTOBUF_NODISCARD std::string* release_dsp_format();
  void set_allocated_dsp_format(std::string* value);

  private:
  const std::string& _internal_dsp_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dsp_format(
      const std::string& value);
  std::string* _internal_mutable_dsp_format();

  public:
  // string audio_channel = 10;
  void clear_audio_channel() ;
  const std::string& audio_channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_channel(Arg_&& arg, Args_... args);
  std::string* mutable_audio_channel();
  PROTOBUF_NODISCARD std::string* release_audio_channel();
  void set_allocated_audio_channel(std::string* value);

  private:
  const std::string& _internal_audio_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_channel(
      const std::string& value);
  std::string* _internal_mutable_audio_channel();

  public:
  // uint32 id = 2;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 node_id = 3;
  void clear_node_id() ;
  ::uint32_t node_id() const;
  void set_node_id(::uint32_t value);

  private:
  ::uint32_t _internal_node_id() const;
  void _internal_set_node_id(::uint32_t value);

  public:
  // .pmx.grpc.PortDirection direction = 4;
  void clear_direction() ;
  ::pmx::grpc::PortDirection direction() const;
  void set_direction(::pmx::grpc::PortDirection value);

  private:
  ::pmx::grpc::PortDirection _internal_direction() const;
  void _internal_set_direction(::pmx::grpc::PortDirection value);

  public:
  // bool physical = 5;
  void clear_physical() ;
  bool physical() const;
  void set_physical(bool value);

  private:
  bool _internal_physical() const;
  void _internal_set_physical(bool value);

  public:
  // bool is_monitor = 12;
  void clear_is_monitor() ;
  bool is_monitor() const;
  void set_is_monitor(bool value);

  private:
  bool _internal_is_monitor() const;
  void _internal_set_is_monitor(bool value);

  public:
  // uint32 object_serial = 11;
  void clear_object_serial() ;
  ::uint32_t object_serial() const;
  void set_object_serial(::uint32_t value);

  private:
  ::uint32_t _internal_object_serial() const;
  void _internal_set_object_serial(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pmx.grpc.ListPort)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListPort& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr alias_;
    ::google::protobuf::internal::ArenaStringPtr group_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr dsp_format_;
    ::google::protobuf::internal::ArenaStringPtr audio_channel_;
    ::uint32_t id_;
    ::uint32_t node_id_;
    int direction_;
    bool physical_;
    bool is_monitor_;
    ::uint32_t object_serial_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_port_2eproto;
};
// -------------------------------------------------------------------

class ListPortsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pmx.grpc.ListPortsResponse) */ {
 public:
  inline ListPortsResponse() : ListPortsResponse(nullptr) {}
  ~ListPortsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListPortsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListPortsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListPortsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListPortsResponse(const ListPortsResponse& from) : ListPortsResponse(nullptr, from) {}
  inline ListPortsResponse(ListPortsResponse&& from) noexcept
      : ListPortsResponse(nullptr, std::move(from)) {}
  inline ListPortsResponse& operator=(const ListPortsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPortsResponse& operator=(ListPortsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPortsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPortsResponse* internal_default_instance() {
    return reinterpret_cast<const ListPortsResponse*>(
        &_ListPortsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ListPortsResponse& a, ListPortsResponse& b) { a.Swap(&b); }
  inline void Swap(ListPortsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPortsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPortsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ListPortsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListPortsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListPortsResponse& from) { ListPortsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ListPortsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pmx.grpc.ListPortsResponse"; }

 protected:
  explicit ListPortsResponse(::google::protobuf::Arena* arena);
  ListPortsResponse(::google::protobuf::Arena* arena, const ListPortsResponse& from);
  ListPortsResponse(::google::protobuf::Arena* arena, ListPortsResponse&& from) noexcept
      : ListPortsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPortsFieldNumber = 1,
  };
  // repeated .pmx.grpc.ListPort ports = 1;
  int ports_size() const;
  private:
  int _internal_ports_size() const;

  public:
  void clear_ports() ;
  ::pmx::grpc::ListPort* mutable_ports(int index);
  ::google::protobuf::RepeatedPtrField<::pmx::grpc::ListPort>* mutable_ports();

  private:
  const ::google::protobuf::RepeatedPtrField<::pmx::grpc::ListPort>& _internal_ports() const;
  ::google::protobuf::RepeatedPtrField<::pmx::grpc::ListPort>* _internal_mutable_ports();
  public:
  const ::pmx::grpc::ListPort& ports(int index) const;
  ::pmx::grpc::ListPort* add_ports();
  const ::google::protobuf::RepeatedPtrField<::pmx::grpc::ListPort>& ports() const;
  // @@protoc_insertion_point(class_scope:pmx.grpc.ListPortsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListPortsResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::pmx::grpc::ListPort > ports_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_port_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ListPort

// uint32 id = 2;
inline void ListPort::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
}
inline ::uint32_t ListPort::id() const {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.id)
  return _internal_id();
}
inline void ListPort::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.id)
}
inline ::uint32_t ListPort::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void ListPort::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// uint32 node_id = 3;
inline void ListPort::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = 0u;
}
inline ::uint32_t ListPort::node_id() const {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.node_id)
  return _internal_node_id();
}
inline void ListPort::set_node_id(::uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.node_id)
}
inline ::uint32_t ListPort::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_;
}
inline void ListPort::_internal_set_node_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = value;
}

// uint32 object_serial = 11;
inline void ListPort::clear_object_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_serial_ = 0u;
}
inline ::uint32_t ListPort::object_serial() const {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.object_serial)
  return _internal_object_serial();
}
inline void ListPort::set_object_serial(::uint32_t value) {
  _internal_set_object_serial(value);
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.object_serial)
}
inline ::uint32_t ListPort::_internal_object_serial() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.object_serial_;
}
inline void ListPort::_internal_set_object_serial(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.object_serial_ = value;
}

// string name = 1;
inline void ListPort::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListPort::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPort::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.name)
}
inline std::string* ListPort::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pmx.grpc.ListPort.name)
  return _s;
}
inline const std::string& ListPort::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ListPort::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ListPort::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ListPort::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pmx.grpc.ListPort.name)
  return _impl_.name_.Release();
}
inline void ListPort::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pmx.grpc.ListPort.name)
}

// .pmx.grpc.PortDirection direction = 4;
inline void ListPort::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = 0;
}
inline ::pmx::grpc::PortDirection ListPort::direction() const {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.direction)
  return _internal_direction();
}
inline void ListPort::set_direction(::pmx::grpc::PortDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.direction)
}
inline ::pmx::grpc::PortDirection ListPort::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::pmx::grpc::PortDirection>(_impl_.direction_);
}
inline void ListPort::_internal_set_direction(::pmx::grpc::PortDirection value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = value;
}

// bool physical = 5;
inline void ListPort::clear_physical() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.physical_ = false;
}
inline bool ListPort::physical() const {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.physical)
  return _internal_physical();
}
inline void ListPort::set_physical(bool value) {
  _internal_set_physical(value);
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.physical)
}
inline bool ListPort::_internal_physical() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.physical_;
}
inline void ListPort::_internal_set_physical(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.physical_ = value;
}

// string alias = 6;
inline void ListPort::clear_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& ListPort::alias() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.alias)
  return _internal_alias();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPort::set_alias(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.alias)
}
inline std::string* ListPort::mutable_alias() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:pmx.grpc.ListPort.alias)
  return _s;
}
inline const std::string& ListPort::_internal_alias() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_.Get();
}
inline void ListPort::_internal_set_alias(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.Set(value, GetArena());
}
inline std::string* ListPort::_internal_mutable_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alias_.Mutable( GetArena());
}
inline std::string* ListPort::release_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pmx.grpc.ListPort.alias)
  return _impl_.alias_.Release();
}
inline void ListPort::set_allocated_alias(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pmx.grpc.ListPort.alias)
}

// string group = 7;
inline void ListPort::clear_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_.ClearToEmpty();
}
inline const std::string& ListPort::group() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.group)
  return _internal_group();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPort::set_group(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.group)
}
inline std::string* ListPort::mutable_group() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:pmx.grpc.ListPort.group)
  return _s;
}
inline const std::string& ListPort::_internal_group() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_.Get();
}
inline void ListPort::_internal_set_group(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_.Set(value, GetArena());
}
inline std::string* ListPort::_internal_mutable_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_.Mutable( GetArena());
}
inline std::string* ListPort::release_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pmx.grpc.ListPort.group)
  return _impl_.group_.Release();
}
inline void ListPort::set_allocated_group(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_.IsDefault()) {
    _impl_.group_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pmx.grpc.ListPort.group)
}

// string path = 8;
inline void ListPort::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ListPort::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPort::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.path)
}
inline std::string* ListPort::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:pmx.grpc.ListPort.path)
  return _s;
}
inline const std::string& ListPort::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void ListPort::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* ListPort::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* ListPort::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pmx.grpc.ListPort.path)
  return _impl_.path_.Release();
}
inline void ListPort::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pmx.grpc.ListPort.path)
}

// string dsp_format = 9;
inline void ListPort::clear_dsp_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dsp_format_.ClearToEmpty();
}
inline const std::string& ListPort::dsp_format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.dsp_format)
  return _internal_dsp_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPort::set_dsp_format(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dsp_format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.dsp_format)
}
inline std::string* ListPort::mutable_dsp_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dsp_format();
  // @@protoc_insertion_point(field_mutable:pmx.grpc.ListPort.dsp_format)
  return _s;
}
inline const std::string& ListPort::_internal_dsp_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dsp_format_.Get();
}
inline void ListPort::_internal_set_dsp_format(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dsp_format_.Set(value, GetArena());
}
inline std::string* ListPort::_internal_mutable_dsp_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dsp_format_.Mutable( GetArena());
}
inline std::string* ListPort::release_dsp_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pmx.grpc.ListPort.dsp_format)
  return _impl_.dsp_format_.Release();
}
inline void ListPort::set_allocated_dsp_format(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dsp_format_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dsp_format_.IsDefault()) {
    _impl_.dsp_format_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pmx.grpc.ListPort.dsp_format)
}

// string audio_channel = 10;
inline void ListPort::clear_audio_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_channel_.ClearToEmpty();
}
inline const std::string& ListPort::audio_channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.audio_channel)
  return _internal_audio_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPort::set_audio_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.audio_channel)
}
inline std::string* ListPort::mutable_audio_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_channel();
  // @@protoc_insertion_point(field_mutable:pmx.grpc.ListPort.audio_channel)
  return _s;
}
inline const std::string& ListPort::_internal_audio_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_channel_.Get();
}
inline void ListPort::_internal_set_audio_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_channel_.Set(value, GetArena());
}
inline std::string* ListPort::_internal_mutable_audio_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audio_channel_.Mutable( GetArena());
}
inline std::string* ListPort::release_audio_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pmx.grpc.ListPort.audio_channel)
  return _impl_.audio_channel_.Release();
}
inline void ListPort::set_allocated_audio_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audio_channel_.IsDefault()) {
    _impl_.audio_channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pmx.grpc.ListPort.audio_channel)
}

// bool is_monitor = 12;
inline void ListPort::clear_is_monitor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_monitor_ = false;
}
inline bool ListPort::is_monitor() const {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPort.is_monitor)
  return _internal_is_monitor();
}
inline void ListPort::set_is_monitor(bool value) {
  _internal_set_is_monitor(value);
  // @@protoc_insertion_point(field_set:pmx.grpc.ListPort.is_monitor)
}
inline bool ListPort::_internal_is_monitor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_monitor_;
}
inline void ListPort::_internal_set_is_monitor(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_monitor_ = value;
}

// -------------------------------------------------------------------

// ListPortsRequest

// -------------------------------------------------------------------

// ListPortsResponse

// repeated .pmx.grpc.ListPort ports = 1;
inline int ListPortsResponse::_internal_ports_size() const {
  return _internal_ports().size();
}
inline int ListPortsResponse::ports_size() const {
  return _internal_ports_size();
}
inline void ListPortsResponse::clear_ports() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ports_.Clear();
}
inline ::pmx::grpc::ListPort* ListPortsResponse::mutable_ports(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:pmx.grpc.ListPortsResponse.ports)
  return _internal_mutable_ports()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::pmx::grpc::ListPort>* ListPortsResponse::mutable_ports()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:pmx.grpc.ListPortsResponse.ports)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ports();
}
inline const ::pmx::grpc::ListPort& ListPortsResponse::ports(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pmx.grpc.ListPortsResponse.ports)
  return _internal_ports().Get(index);
}
inline ::pmx::grpc::ListPort* ListPortsResponse::add_ports() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::pmx::grpc::ListPort* _add = _internal_mutable_ports()->Add();
  // @@protoc_insertion_point(field_add:pmx.grpc.ListPortsResponse.ports)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::pmx::grpc::ListPort>& ListPortsResponse::ports() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:pmx.grpc.ListPortsResponse.ports)
  return _internal_ports();
}
inline const ::google::protobuf::RepeatedPtrField<::pmx::grpc::ListPort>&
ListPortsResponse::_internal_ports() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ports_;
}
inline ::google::protobuf::RepeatedPtrField<::pmx::grpc::ListPort>*
ListPortsResponse::_internal_mutable_ports() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ports_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace pmx


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::pmx::grpc::PortDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pmx::grpc::PortDirection>() {
  return ::pmx::grpc::PortDirection_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // port_2eproto_2epb_2eh
